package org.openscience.cdk.isomorphism;

import org.junit.Test;
import org.openscience.cdk.interfaces.IAtomContainer;
import org.openscience.cdk.silent.SilentChemObjectBuilder;
import org.openscience.cdk.smiles.SmilesGenerator;
import org.openscience.cdk.smiles.SmilesParser;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.is;

/** @author John May */
public class RingOpenTest {

    @Test public void ribose() throws Exception{
        // atom classes useful to visualising
        assertOpenning("[OH:1][CH2:2][C@H:3]1[O:4][C@H:5]([OH:6])[C@@H:7]([OH:8])[C@@H:9]1[OH:10]",
                       "[OH:1][CH2:2][C@@H:3]([OH:4])[C@H:9]([C@@H:7]([C@H:5]=[O:6])[OH:8])[OH:10]");        
    }
    
    @Test public void glucose() throws Exception {
        assertOpenning("OC[C@H]1OC(O)[C@H](O)[C@@H](O)[C@@H]1O",
                       "OC[C@@H](O)[C@H]([C@@H]([C@H](C=O)O)O)O");
    }
    
    void assertOpenning(String smi, String exp) throws Exception {
        IAtomContainer ac = smi(smi);
        RingOpen.open(ac);
        String act = SmilesGenerator.isomeric().withAtomClasses().create(ac);
        assertThat(act, is(exp));
    }
    
    private IAtomContainer smi(String smi) throws Exception {
        SmilesParser smipar = new SmilesParser(SilentChemObjectBuilder.getInstance());
        return smipar.parseSmiles(smi);
    }
    
}
